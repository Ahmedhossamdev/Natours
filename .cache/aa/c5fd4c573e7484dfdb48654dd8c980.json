{"id":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\package.json","includedInParent":true,"mtime":1686031678189},{"name":"./HttpClient.js","loc":{"line":4,"column":32,"index":177},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\net\\FetchHttpClient.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\net\\HttpClient.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchHttpClientResponse = exports.FetchHttpClient = void 0;\nconst HttpClient_js_1 = require(\"./HttpClient.js\");\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient_js_1.HttpClient {\n    constructor(fetchFn) {\n        super();\n        this._fetchFn = fetchFn;\n    }\n    /** @override. */\n    getClientName() {\n        return 'fetch';\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n        url.port = port;\n        // For methods which expect payloads, we should always pass a body value\n        // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n        // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n        // for more details.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        const body = requestData || (methodHasPayload ? '' : undefined);\n        const fetchFn = this._fetchFn || fetch;\n        const fetchPromise = fetchFn(url.toString(), {\n            method,\n            // @ts-ignore\n            headers,\n            // @ts-ignore\n            body,\n        });\n        // The Fetch API does not support passing in a timeout natively, so a\n        // timeout promise is constructed to race against the fetch and preempt the\n        // request, simulating a timeout.\n        //\n        // This timeout behavior differs from Node:\n        // - Fetch uses a single timeout for the entire length of the request.\n        // - Node is more fine-grained and resets the timeout after each stage of\n        //   the request.\n        //\n        // As an example, if the timeout is set to 30s and the connection takes 20s\n        // to be established followed by 20s for the body, Fetch would timeout but\n        // Node would not. The more fine-grained timeout cannot be implemented with\n        // fetch.\n        let pendingTimeoutId;\n        const timeoutPromise = new Promise((_, reject) => {\n            pendingTimeoutId = setTimeout(() => {\n                pendingTimeoutId = null;\n                reject(HttpClient_js_1.HttpClient.makeTimeoutError());\n            }, timeout);\n        });\n        return Promise.race([fetchPromise, timeoutPromise])\n            .then((res) => {\n            return new FetchHttpClientResponse(res);\n        })\n            .finally(() => {\n            if (pendingTimeoutId) {\n                clearTimeout(pendingTimeoutId);\n            }\n        });\n    }\n}\nexports.FetchHttpClient = FetchHttpClient;\nclass FetchHttpClientResponse extends HttpClient_js_1.HttpClientResponse {\n    constructor(res) {\n        super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n        this._res = res;\n    }\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // Unfortunately `fetch` does not have event handlers for when the stream is\n        // completely read. We therefore invoke the streamCompleteCallback right\n        // away. This callback emits a response event with metadata and completes\n        // metrics, so it's ok to do this without waiting for the stream to be\n        // completely read.\n        streamCompleteCallback();\n        // Fetch's `body` property is expected to be a readable stream of the body.\n        return this._res.body;\n    }\n    toJSON() {\n        return this._res.json();\n    }\n    static _transformHeadersToObject(headers) {\n        // Fetch uses a Headers instance so this must be converted to a barebones\n        // JS object to meet the HttpClient interface.\n        const headersObj = {};\n        for (const entry of headers) {\n            if (!Array.isArray(entry) || entry.length != 2) {\n                throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n            }\n            headersObj[entry[0]] = entry[1];\n        }\n        return headersObj;\n    }\n}\nexports.FetchHttpClientResponse = FetchHttpClientResponse;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/stripe/cjs/net/FetchHttpClient.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}}],"sources":{"../../node_modules/stripe/cjs/net/FetchHttpClient.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchHttpClientResponse = exports.FetchHttpClient = void 0;\nconst HttpClient_js_1 = require(\"./HttpClient.js\");\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient_js_1.HttpClient {\n    constructor(fetchFn) {\n        super();\n        this._fetchFn = fetchFn;\n    }\n    /** @override. */\n    getClientName() {\n        return 'fetch';\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n        url.port = port;\n        // For methods which expect payloads, we should always pass a body value\n        // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n        // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n        // for more details.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        const body = requestData || (methodHasPayload ? '' : undefined);\n        const fetchFn = this._fetchFn || fetch;\n        const fetchPromise = fetchFn(url.toString(), {\n            method,\n            // @ts-ignore\n            headers,\n            // @ts-ignore\n            body,\n        });\n        // The Fetch API does not support passing in a timeout natively, so a\n        // timeout promise is constructed to race against the fetch and preempt the\n        // request, simulating a timeout.\n        //\n        // This timeout behavior differs from Node:\n        // - Fetch uses a single timeout for the entire length of the request.\n        // - Node is more fine-grained and resets the timeout after each stage of\n        //   the request.\n        //\n        // As an example, if the timeout is set to 30s and the connection takes 20s\n        // to be established followed by 20s for the body, Fetch would timeout but\n        // Node would not. The more fine-grained timeout cannot be implemented with\n        // fetch.\n        let pendingTimeoutId;\n        const timeoutPromise = new Promise((_, reject) => {\n            pendingTimeoutId = setTimeout(() => {\n                pendingTimeoutId = null;\n                reject(HttpClient_js_1.HttpClient.makeTimeoutError());\n            }, timeout);\n        });\n        return Promise.race([fetchPromise, timeoutPromise])\n            .then((res) => {\n            return new FetchHttpClientResponse(res);\n        })\n            .finally(() => {\n            if (pendingTimeoutId) {\n                clearTimeout(pendingTimeoutId);\n            }\n        });\n    }\n}\nexports.FetchHttpClient = FetchHttpClient;\nclass FetchHttpClientResponse extends HttpClient_js_1.HttpClientResponse {\n    constructor(res) {\n        super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n        this._res = res;\n    }\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // Unfortunately `fetch` does not have event handlers for when the stream is\n        // completely read. We therefore invoke the streamCompleteCallback right\n        // away. This callback emits a response event with metadata and completes\n        // metrics, so it's ok to do this without waiting for the stream to be\n        // completely read.\n        streamCompleteCallback();\n        // Fetch's `body` property is expected to be a readable stream of the body.\n        return this._res.body;\n    }\n    toJSON() {\n        return this._res.json();\n    }\n    static _transformHeadersToObject(headers) {\n        // Fetch uses a Headers instance so this must be converted to a barebones\n        // JS object to meet the HttpClient interface.\n        const headersObj = {};\n        for (const entry of headers) {\n            if (!Array.isArray(entry) || entry.length != 2) {\n                throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n            }\n            headersObj[entry[0]] = entry[1];\n        }\n        return headersObj;\n    }\n}\nexports.FetchHttpClientResponse = FetchHttpClientResponse;\n"},"lineCount":107}},"error":null,"hash":"425bc6d69bd381fd052de0217366dc93","cacheData":{"env":{}}}