{"id":"../../node_modules/cipher-base/index.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\cipher-base\\package.json","includedInParent":true,"mtime":1684371839368},{"name":"safe-buffer","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\cipher-base\\index.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\safe-buffer\\index.js"},{"name":"stream","loc":{"line":2,"column":24,"index":68},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\cipher-base\\index.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stream-browserify\\index.js"},{"name":"string_decoder","loc":{"line":3,"column":28,"index":117},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\cipher-base\\index.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\string_decoder\\lib\\string_decoder.js"},{"name":"inherits","loc":{"line":4,"column":23,"index":173},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\cipher-base\\index.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"\nvar Buffer = require('safe-buffer').Buffer\r\nvar Transform = require('stream').Transform\r\nvar StringDecoder = require('string_decoder').StringDecoder\r\nvar inherits = require('inherits')\r\n\r\nfunction CipherBase (hashMode) {\r\n  Transform.call(this)\r\n  this.hashMode = typeof hashMode === 'string'\r\n  if (this.hashMode) {\r\n    this[hashMode] = this._finalOrDigest\r\n  } else {\r\n    this.final = this._finalOrDigest\r\n  }\r\n  if (this._final) {\r\n    this.__final = this._final\r\n    this._final = null\r\n  }\r\n  this._decoder = null\r\n  this._encoding = null\r\n}\r\ninherits(CipherBase, Transform)\r\n\r\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\r\n  if (typeof data === 'string') {\r\n    data = Buffer.from(data, inputEnc)\r\n  }\r\n\r\n  var outData = this._update(data)\r\n  if (this.hashMode) return this\r\n\r\n  if (outputEnc) {\r\n    outData = this._toString(outData, outputEnc)\r\n  }\r\n\r\n  return outData\r\n}\r\n\r\nCipherBase.prototype.setAutoPadding = function () {}\r\nCipherBase.prototype.getAuthTag = function () {\r\n  throw new Error('trying to get auth tag in unsupported state')\r\n}\r\n\r\nCipherBase.prototype.setAuthTag = function () {\r\n  throw new Error('trying to set auth tag in unsupported state')\r\n}\r\n\r\nCipherBase.prototype.setAAD = function () {\r\n  throw new Error('trying to set aad in unsupported state')\r\n}\r\n\r\nCipherBase.prototype._transform = function (data, _, next) {\r\n  var err\r\n  try {\r\n    if (this.hashMode) {\r\n      this._update(data)\r\n    } else {\r\n      this.push(this._update(data))\r\n    }\r\n  } catch (e) {\r\n    err = e\r\n  } finally {\r\n    next(err)\r\n  }\r\n}\r\nCipherBase.prototype._flush = function (done) {\r\n  var err\r\n  try {\r\n    this.push(this.__final())\r\n  } catch (e) {\r\n    err = e\r\n  }\r\n\r\n  done(err)\r\n}\r\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\r\n  var outData = this.__final() || Buffer.alloc(0)\r\n  if (outputEnc) {\r\n    outData = this._toString(outData, outputEnc, true)\r\n  }\r\n  return outData\r\n}\r\n\r\nCipherBase.prototype._toString = function (value, enc, fin) {\r\n  if (!this._decoder) {\r\n    this._decoder = new StringDecoder(enc)\r\n    this._encoding = enc\r\n  }\r\n\r\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings')\r\n\r\n  var out = this._decoder.write(value)\r\n  if (fin) {\r\n    out += this._decoder.end()\r\n  }\r\n\r\n  return out\r\n}\r\n\r\nmodule.exports = CipherBase\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/cipher-base/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/cipher-base/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}}],"sources":{"../../node_modules/cipher-base/index.js":"var Buffer = require('safe-buffer').Buffer\r\nvar Transform = require('stream').Transform\r\nvar StringDecoder = require('string_decoder').StringDecoder\r\nvar inherits = require('inherits')\r\n\r\nfunction CipherBase (hashMode) {\r\n  Transform.call(this)\r\n  this.hashMode = typeof hashMode === 'string'\r\n  if (this.hashMode) {\r\n    this[hashMode] = this._finalOrDigest\r\n  } else {\r\n    this.final = this._finalOrDigest\r\n  }\r\n  if (this._final) {\r\n    this.__final = this._final\r\n    this._final = null\r\n  }\r\n  this._decoder = null\r\n  this._encoding = null\r\n}\r\ninherits(CipherBase, Transform)\r\n\r\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\r\n  if (typeof data === 'string') {\r\n    data = Buffer.from(data, inputEnc)\r\n  }\r\n\r\n  var outData = this._update(data)\r\n  if (this.hashMode) return this\r\n\r\n  if (outputEnc) {\r\n    outData = this._toString(outData, outputEnc)\r\n  }\r\n\r\n  return outData\r\n}\r\n\r\nCipherBase.prototype.setAutoPadding = function () {}\r\nCipherBase.prototype.getAuthTag = function () {\r\n  throw new Error('trying to get auth tag in unsupported state')\r\n}\r\n\r\nCipherBase.prototype.setAuthTag = function () {\r\n  throw new Error('trying to set auth tag in unsupported state')\r\n}\r\n\r\nCipherBase.prototype.setAAD = function () {\r\n  throw new Error('trying to set aad in unsupported state')\r\n}\r\n\r\nCipherBase.prototype._transform = function (data, _, next) {\r\n  var err\r\n  try {\r\n    if (this.hashMode) {\r\n      this._update(data)\r\n    } else {\r\n      this.push(this._update(data))\r\n    }\r\n  } catch (e) {\r\n    err = e\r\n  } finally {\r\n    next(err)\r\n  }\r\n}\r\nCipherBase.prototype._flush = function (done) {\r\n  var err\r\n  try {\r\n    this.push(this.__final())\r\n  } catch (e) {\r\n    err = e\r\n  }\r\n\r\n  done(err)\r\n}\r\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\r\n  var outData = this.__final() || Buffer.alloc(0)\r\n  if (outputEnc) {\r\n    outData = this._toString(outData, outputEnc, true)\r\n  }\r\n  return outData\r\n}\r\n\r\nCipherBase.prototype._toString = function (value, enc, fin) {\r\n  if (!this._decoder) {\r\n    this._decoder = new StringDecoder(enc)\r\n    this._encoding = enc\r\n  }\r\n\r\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings')\r\n\r\n  var out = this._decoder.write(value)\r\n  if (fin) {\r\n    out += this._decoder.end()\r\n  }\r\n\r\n  return out\r\n}\r\n\r\nmodule.exports = CipherBase\r\n"},"lineCount":101}},"error":null,"hash":"504979af9514a60982247ef919aadd9f","cacheData":{"env":{}}}