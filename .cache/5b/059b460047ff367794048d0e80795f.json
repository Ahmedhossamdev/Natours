{"id":"../../node_modules/sha.js/hash.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\sha.js\\package.json","includedInParent":true,"mtime":1684371860891},{"name":"safe-buffer","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\sha.js\\hash.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar Buffer = require('safe-buffer').Buffer\r\n\r\n// prototype class for hash functions\r\nfunction Hash (blockSize, finalSize) {\r\n  this._block = Buffer.alloc(blockSize)\r\n  this._finalSize = finalSize\r\n  this._blockSize = blockSize\r\n  this._len = 0\r\n}\r\n\r\nHash.prototype.update = function (data, enc) {\r\n  if (typeof data === 'string') {\r\n    enc = enc || 'utf8'\r\n    data = Buffer.from(data, enc)\r\n  }\r\n\r\n  var block = this._block\r\n  var blockSize = this._blockSize\r\n  var length = data.length\r\n  var accum = this._len\r\n\r\n  for (var offset = 0; offset < length;) {\r\n    var assigned = accum % blockSize\r\n    var remainder = Math.min(length - offset, blockSize - assigned)\r\n\r\n    for (var i = 0; i < remainder; i++) {\r\n      block[assigned + i] = data[offset + i]\r\n    }\r\n\r\n    accum += remainder\r\n    offset += remainder\r\n\r\n    if ((accum % blockSize) === 0) {\r\n      this._update(block)\r\n    }\r\n  }\r\n\r\n  this._len += length\r\n  return this\r\n}\r\n\r\nHash.prototype.digest = function (enc) {\r\n  var rem = this._len % this._blockSize\r\n\r\n  this._block[rem] = 0x80\r\n\r\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\r\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\r\n  this._block.fill(0, rem + 1)\r\n\r\n  if (rem >= this._finalSize) {\r\n    this._update(this._block)\r\n    this._block.fill(0)\r\n  }\r\n\r\n  var bits = this._len * 8\r\n\r\n  // uint32\r\n  if (bits <= 0xffffffff) {\r\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\r\n\r\n  // uint64\r\n  } else {\r\n    var lowBits = (bits & 0xffffffff) >>> 0\r\n    var highBits = (bits - lowBits) / 0x100000000\r\n\r\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\r\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\r\n  }\r\n\r\n  this._update(this._block)\r\n  var hash = this._hash()\r\n\r\n  return enc ? hash.toString(enc) : hash\r\n}\r\n\r\nHash.prototype._update = function () {\r\n  throw new Error('_update must be implemented by subclass')\r\n}\r\n\r\nmodule.exports = Hash\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/sha.js/hash.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/sha.js/hash.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}}],"sources":{"../../node_modules/sha.js/hash.js":"var Buffer = require('safe-buffer').Buffer\r\n\r\n// prototype class for hash functions\r\nfunction Hash (blockSize, finalSize) {\r\n  this._block = Buffer.alloc(blockSize)\r\n  this._finalSize = finalSize\r\n  this._blockSize = blockSize\r\n  this._len = 0\r\n}\r\n\r\nHash.prototype.update = function (data, enc) {\r\n  if (typeof data === 'string') {\r\n    enc = enc || 'utf8'\r\n    data = Buffer.from(data, enc)\r\n  }\r\n\r\n  var block = this._block\r\n  var blockSize = this._blockSize\r\n  var length = data.length\r\n  var accum = this._len\r\n\r\n  for (var offset = 0; offset < length;) {\r\n    var assigned = accum % blockSize\r\n    var remainder = Math.min(length - offset, blockSize - assigned)\r\n\r\n    for (var i = 0; i < remainder; i++) {\r\n      block[assigned + i] = data[offset + i]\r\n    }\r\n\r\n    accum += remainder\r\n    offset += remainder\r\n\r\n    if ((accum % blockSize) === 0) {\r\n      this._update(block)\r\n    }\r\n  }\r\n\r\n  this._len += length\r\n  return this\r\n}\r\n\r\nHash.prototype.digest = function (enc) {\r\n  var rem = this._len % this._blockSize\r\n\r\n  this._block[rem] = 0x80\r\n\r\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\r\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\r\n  this._block.fill(0, rem + 1)\r\n\r\n  if (rem >= this._finalSize) {\r\n    this._update(this._block)\r\n    this._block.fill(0)\r\n  }\r\n\r\n  var bits = this._len * 8\r\n\r\n  // uint32\r\n  if (bits <= 0xffffffff) {\r\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\r\n\r\n  // uint64\r\n  } else {\r\n    var lowBits = (bits & 0xffffffff) >>> 0\r\n    var highBits = (bits - lowBits) / 0x100000000\r\n\r\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\r\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\r\n  }\r\n\r\n  this._update(this._block)\r\n  var hash = this._hash()\r\n\r\n  return enc ? hash.toString(enc) : hash\r\n}\r\n\r\nHash.prototype._update = function () {\r\n  throw new Error('_update must be implemented by subclass')\r\n}\r\n\r\nmodule.exports = Hash\r\n"},"lineCount":83}},"error":null,"hash":"fc333e8abe53882454b78b5f4a017133","cacheData":{"env":{}}}