{"id":"../../node_modules/browserify-sign/browser/verify.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\package.json","includedInParent":true,"mtime":1684371838528},{"name":"safe-buffer","loc":{"line":2,"column":21,"index":111},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\browser\\verify.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\safe-buffer\\index.js"},{"name":"bn.js","loc":{"line":3,"column":17,"index":151},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\browser\\verify.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\bn.js\\lib\\bn.js"},{"name":"elliptic","loc":{"line":4,"column":17,"index":178},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\browser\\verify.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\elliptic\\lib\\elliptic.js"},{"name":"parse-asn1","loc":{"line":5,"column":24,"index":218},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\browser\\verify.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\parse-asn1\\index.js"},{"name":"./curves.json","loc":{"line":6,"column":21,"index":254},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\browser\\verify.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-sign\\browser\\curves.json"}],"generated":{"js":"\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar BN = require('bn.js')\r\nvar EC = require('elliptic').ec\r\nvar parseKeys = require('parse-asn1')\r\nvar curves = require('./curves.json')\r\n\r\nfunction verify (sig, hash, key, signType, tag) {\r\n  var pub = parseKeys(key)\r\n  if (pub.type === 'ec') {\r\n    // rsa keys can be interpreted as ecdsa ones in openssl\r\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\r\n    return ecVerify(sig, hash, pub)\r\n  } else if (pub.type === 'dsa') {\r\n    if (signType !== 'dsa') throw new Error('wrong public key type')\r\n    return dsaVerify(sig, hash, pub)\r\n  } else {\r\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\r\n  }\r\n  hash = Buffer.concat([tag, hash])\r\n  var len = pub.modulus.byteLength()\r\n  var pad = [1]\r\n  var padNum = 0\r\n  while (hash.length + pad.length + 2 < len) {\r\n    pad.push(0xff)\r\n    padNum++\r\n  }\r\n  pad.push(0x00)\r\n  var i = -1\r\n  while (++i < hash.length) {\r\n    pad.push(hash[i])\r\n  }\r\n  pad = Buffer.from(pad)\r\n  var red = BN.mont(pub.modulus)\r\n  sig = new BN(sig).toRed(red)\r\n\r\n  sig = sig.redPow(new BN(pub.publicExponent))\r\n  sig = Buffer.from(sig.fromRed().toArray())\r\n  var out = padNum < 8 ? 1 : 0\r\n  len = Math.min(sig.length, pad.length)\r\n  if (sig.length !== pad.length) out = 1\r\n\r\n  i = -1\r\n  while (++i < len) out |= sig[i] ^ pad[i]\r\n  return out === 0\r\n}\r\n\r\nfunction ecVerify (sig, hash, pub) {\r\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\r\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\r\n\r\n  var curve = new EC(curveId)\r\n  var pubkey = pub.data.subjectPrivateKey.data\r\n\r\n  return curve.verify(hash, sig, pubkey)\r\n}\r\n\r\nfunction dsaVerify (sig, hash, pub) {\r\n  var p = pub.data.p\r\n  var q = pub.data.q\r\n  var g = pub.data.g\r\n  var y = pub.data.pub_key\r\n  var unpacked = parseKeys.signature.decode(sig, 'der')\r\n  var s = unpacked.s\r\n  var r = unpacked.r\r\n  checkValue(s, q)\r\n  checkValue(r, q)\r\n  var montp = BN.mont(p)\r\n  var w = s.invm(q)\r\n  var v = g.toRed(montp)\r\n    .redPow(new BN(hash).mul(w).mod(q))\r\n    .fromRed()\r\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\r\n    .mod(p)\r\n    .mod(q)\r\n  return v.cmp(r) === 0\r\n}\r\n\r\nfunction checkValue (b, q) {\r\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\r\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\r\n}\r\n\r\nmodule.exports = verify\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/browserify-sign/browser/verify.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}}],"sources":{"../../node_modules/browserify-sign/browser/verify.js":"// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar BN = require('bn.js')\r\nvar EC = require('elliptic').ec\r\nvar parseKeys = require('parse-asn1')\r\nvar curves = require('./curves.json')\r\n\r\nfunction verify (sig, hash, key, signType, tag) {\r\n  var pub = parseKeys(key)\r\n  if (pub.type === 'ec') {\r\n    // rsa keys can be interpreted as ecdsa ones in openssl\r\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\r\n    return ecVerify(sig, hash, pub)\r\n  } else if (pub.type === 'dsa') {\r\n    if (signType !== 'dsa') throw new Error('wrong public key type')\r\n    return dsaVerify(sig, hash, pub)\r\n  } else {\r\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\r\n  }\r\n  hash = Buffer.concat([tag, hash])\r\n  var len = pub.modulus.byteLength()\r\n  var pad = [1]\r\n  var padNum = 0\r\n  while (hash.length + pad.length + 2 < len) {\r\n    pad.push(0xff)\r\n    padNum++\r\n  }\r\n  pad.push(0x00)\r\n  var i = -1\r\n  while (++i < hash.length) {\r\n    pad.push(hash[i])\r\n  }\r\n  pad = Buffer.from(pad)\r\n  var red = BN.mont(pub.modulus)\r\n  sig = new BN(sig).toRed(red)\r\n\r\n  sig = sig.redPow(new BN(pub.publicExponent))\r\n  sig = Buffer.from(sig.fromRed().toArray())\r\n  var out = padNum < 8 ? 1 : 0\r\n  len = Math.min(sig.length, pad.length)\r\n  if (sig.length !== pad.length) out = 1\r\n\r\n  i = -1\r\n  while (++i < len) out |= sig[i] ^ pad[i]\r\n  return out === 0\r\n}\r\n\r\nfunction ecVerify (sig, hash, pub) {\r\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\r\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\r\n\r\n  var curve = new EC(curveId)\r\n  var pubkey = pub.data.subjectPrivateKey.data\r\n\r\n  return curve.verify(hash, sig, pubkey)\r\n}\r\n\r\nfunction dsaVerify (sig, hash, pub) {\r\n  var p = pub.data.p\r\n  var q = pub.data.q\r\n  var g = pub.data.g\r\n  var y = pub.data.pub_key\r\n  var unpacked = parseKeys.signature.decode(sig, 'der')\r\n  var s = unpacked.s\r\n  var r = unpacked.r\r\n  checkValue(s, q)\r\n  checkValue(r, q)\r\n  var montp = BN.mont(p)\r\n  var w = s.invm(q)\r\n  var v = g.toRed(montp)\r\n    .redPow(new BN(hash).mul(w).mod(q))\r\n    .fromRed()\r\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\r\n    .mod(p)\r\n    .mod(q)\r\n  return v.cmp(r) === 0\r\n}\r\n\r\nfunction checkValue (b, q) {\r\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\r\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\r\n}\r\n\r\nmodule.exports = verify\r\n"},"lineCount":86}},"error":null,"hash":"dca813dcd2a7eeee51124c6cd058ddd0","cacheData":{"env":{}}}