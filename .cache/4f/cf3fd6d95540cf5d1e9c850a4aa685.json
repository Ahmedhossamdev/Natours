{"id":"../../node_modules/stripe/cjs/StripeResource.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\package.json","includedInParent":true,"mtime":1686031678189},{"name":"./utils.js","loc":{"line":4,"column":27,"index":137},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\StripeResource.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\utils.js"},{"name":"./StripeMethod.js","loc":{"line":5,"column":34,"index":186},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\StripeResource.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\StripeMethod.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StripeResource = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nconst StripeMethod_js_1 = require(\"./StripeMethod.js\");\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils_js_1.protoExtend;\n// Expose method-creator\nStripeResource.method = StripeMethod_js_1.stripeMethod;\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n    this._stripe = stripe;\n    if (deprecatedUrlData) {\n        throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n    }\n    this.basePath = (0, utils_js_1.makeURLInterpolator)(\n    // @ts-ignore changing type of basePath\n    this.basePath || stripe.getApiField('basePath'));\n    // @ts-ignore changing type of path\n    this.resourcePath = this.path;\n    // @ts-ignore changing type of path\n    this.path = (0, utils_js_1.makeURLInterpolator)(this.path);\n    this.initialize(...arguments);\n}\nexports.StripeResource = StripeResource;\nStripeResource.prototype = {\n    _stripe: null,\n    // @ts-ignore the type of path changes in ctor\n    path: '',\n    resourcePath: '',\n    // Methods that don't use the API's default '/v1' path can override it with this setting.\n    basePath: null,\n    initialize() { },\n    // Function to override the default data processor. This allows full control\n    // over how a StripeResource's request data will get converted into an HTTP\n    // body. This is useful for non-standard HTTP requests. The function should\n    // take method name, data, and headers as arguments.\n    requestDataProcessor: null,\n    // Function to add a validation checks before sending the request, errors should\n    // be thrown, and they will be passed to the callback/promise.\n    validateRequest: null,\n    createFullPath(commandPath, urlData) {\n        const urlParts = [this.basePath(urlData), this.path(urlData)];\n        if (typeof commandPath === 'function') {\n            const computedCommandPath = commandPath(urlData);\n            // If we have no actual command path, we just omit it to avoid adding a\n            // trailing slash. This is important for top-level listing requests, which\n            // do not have a command path.\n            if (computedCommandPath) {\n                urlParts.push(computedCommandPath);\n            }\n        }\n        else {\n            urlParts.push(commandPath);\n        }\n        return this._joinUrlParts(urlParts);\n    },\n    // Creates a relative resource path with symbols left in (unlike\n    // createFullPath which takes some data to replace them with). For example it\n    // might produce: /invoices/{id}\n    createResourcePathWithSymbols(pathWithSymbols) {\n        // If there is no path beyond the resource path, we want to produce just\n        // /<resource path> rather than /<resource path>/.\n        if (pathWithSymbols) {\n            return `/${this._joinUrlParts([this.resourcePath, pathWithSymbols])}`;\n        }\n        else {\n            return `/${this.resourcePath}`;\n        }\n    },\n    _joinUrlParts(parts) {\n        // Replace any accidentally doubled up slashes. This previously used\n        // path.join, which would do this as well. Unfortunately we need to do this\n        // as the functions for creating paths are technically part of the public\n        // interface and so we need to preserve backwards compatibility.\n        return parts.join('/').replace(/\\/{2,}/g, '/');\n    },\n    _getRequestOpts(requestArgs, spec, overrideData) {\n        // Extract spec values with defaults.\n        const requestMethod = (spec.method || 'GET').toUpperCase();\n        const urlParams = spec.urlParams || [];\n        const encode = spec.encode || ((data) => data);\n        const isUsingFullPath = !!spec.fullPath;\n        const commandPath = (0, utils_js_1.makeURLInterpolator)(isUsingFullPath ? spec.fullPath : spec.path || '');\n        // When using fullPath, we ignore the resource path as it should already be\n        // fully qualified.\n        const path = isUsingFullPath\n            ? spec.fullPath\n            : this.createResourcePathWithSymbols(spec.path);\n        // Don't mutate args externally.\n        const args = [].slice.call(requestArgs);\n        // Generate and validate url params.\n        const urlData = urlParams.reduce((urlData, param) => {\n            const arg = args.shift();\n            if (typeof arg !== 'string') {\n                throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n            }\n            urlData[param] = arg;\n            return urlData;\n        }, {});\n        // Pull request data and options (headers, auth) from args.\n        const dataFromArgs = (0, utils_js_1.getDataFromArgs)(args);\n        const data = encode(Object.assign({}, dataFromArgs, overrideData));\n        const options = (0, utils_js_1.getOptionsFromArgs)(args);\n        const host = options.host || spec.host;\n        const streaming = !!spec.streaming;\n        // Validate that there are no more args.\n        if (args.filter((x) => x != null).length) {\n            throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n        }\n        // When using full path, we can just invoke the URL interpolator directly\n        // as we don't need to use the resource to create a full path.\n        const requestPath = isUsingFullPath\n            ? commandPath(urlData)\n            : this.createFullPath(commandPath, urlData);\n        const headers = Object.assign(options.headers, spec.headers);\n        if (spec.validator) {\n            spec.validator(data, { headers });\n        }\n        const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n        const bodyData = dataInQuery ? {} : data;\n        const queryData = dataInQuery ? data : {};\n        return {\n            requestMethod,\n            requestPath,\n            bodyData,\n            queryData,\n            auth: options.auth,\n            headers,\n            host: host !== null && host !== void 0 ? host : null,\n            streaming,\n            settings: options.settings,\n        };\n    },\n    _makeRequest(requestArgs, spec, overrideData) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            let opts;\n            try {\n                opts = this._getRequestOpts(requestArgs, spec, overrideData);\n            }\n            catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(spec.transformResponseData\n                        ? spec.transformResponseData(response)\n                        : response);\n                }\n            }\n            const emptyQuery = Object.keys(opts.queryData).length === 0;\n            const path = [\n                opts.requestPath,\n                emptyQuery ? '' : '?',\n                (0, utils_js_1.stringifyRequestData)(opts.queryData),\n            ].join('');\n            const { headers, settings } = opts;\n            this._stripe._requestSender._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, { headers, settings, streaming: opts.streaming }, requestCallback, (_a = this.requestDataProcessor) === null || _a === void 0 ? void 0 : _a.bind(this));\n        });\n    },\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../node_modules/stripe/cjs/StripeResource.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}}],"sources":{"../../node_modules/stripe/cjs/StripeResource.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StripeResource = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nconst StripeMethod_js_1 = require(\"./StripeMethod.js\");\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils_js_1.protoExtend;\n// Expose method-creator\nStripeResource.method = StripeMethod_js_1.stripeMethod;\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n    this._stripe = stripe;\n    if (deprecatedUrlData) {\n        throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n    }\n    this.basePath = (0, utils_js_1.makeURLInterpolator)(\n    // @ts-ignore changing type of basePath\n    this.basePath || stripe.getApiField('basePath'));\n    // @ts-ignore changing type of path\n    this.resourcePath = this.path;\n    // @ts-ignore changing type of path\n    this.path = (0, utils_js_1.makeURLInterpolator)(this.path);\n    this.initialize(...arguments);\n}\nexports.StripeResource = StripeResource;\nStripeResource.prototype = {\n    _stripe: null,\n    // @ts-ignore the type of path changes in ctor\n    path: '',\n    resourcePath: '',\n    // Methods that don't use the API's default '/v1' path can override it with this setting.\n    basePath: null,\n    initialize() { },\n    // Function to override the default data processor. This allows full control\n    // over how a StripeResource's request data will get converted into an HTTP\n    // body. This is useful for non-standard HTTP requests. The function should\n    // take method name, data, and headers as arguments.\n    requestDataProcessor: null,\n    // Function to add a validation checks before sending the request, errors should\n    // be thrown, and they will be passed to the callback/promise.\n    validateRequest: null,\n    createFullPath(commandPath, urlData) {\n        const urlParts = [this.basePath(urlData), this.path(urlData)];\n        if (typeof commandPath === 'function') {\n            const computedCommandPath = commandPath(urlData);\n            // If we have no actual command path, we just omit it to avoid adding a\n            // trailing slash. This is important for top-level listing requests, which\n            // do not have a command path.\n            if (computedCommandPath) {\n                urlParts.push(computedCommandPath);\n            }\n        }\n        else {\n            urlParts.push(commandPath);\n        }\n        return this._joinUrlParts(urlParts);\n    },\n    // Creates a relative resource path with symbols left in (unlike\n    // createFullPath which takes some data to replace them with). For example it\n    // might produce: /invoices/{id}\n    createResourcePathWithSymbols(pathWithSymbols) {\n        // If there is no path beyond the resource path, we want to produce just\n        // /<resource path> rather than /<resource path>/.\n        if (pathWithSymbols) {\n            return `/${this._joinUrlParts([this.resourcePath, pathWithSymbols])}`;\n        }\n        else {\n            return `/${this.resourcePath}`;\n        }\n    },\n    _joinUrlParts(parts) {\n        // Replace any accidentally doubled up slashes. This previously used\n        // path.join, which would do this as well. Unfortunately we need to do this\n        // as the functions for creating paths are technically part of the public\n        // interface and so we need to preserve backwards compatibility.\n        return parts.join('/').replace(/\\/{2,}/g, '/');\n    },\n    _getRequestOpts(requestArgs, spec, overrideData) {\n        // Extract spec values with defaults.\n        const requestMethod = (spec.method || 'GET').toUpperCase();\n        const urlParams = spec.urlParams || [];\n        const encode = spec.encode || ((data) => data);\n        const isUsingFullPath = !!spec.fullPath;\n        const commandPath = (0, utils_js_1.makeURLInterpolator)(isUsingFullPath ? spec.fullPath : spec.path || '');\n        // When using fullPath, we ignore the resource path as it should already be\n        // fully qualified.\n        const path = isUsingFullPath\n            ? spec.fullPath\n            : this.createResourcePathWithSymbols(spec.path);\n        // Don't mutate args externally.\n        const args = [].slice.call(requestArgs);\n        // Generate and validate url params.\n        const urlData = urlParams.reduce((urlData, param) => {\n            const arg = args.shift();\n            if (typeof arg !== 'string') {\n                throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n            }\n            urlData[param] = arg;\n            return urlData;\n        }, {});\n        // Pull request data and options (headers, auth) from args.\n        const dataFromArgs = (0, utils_js_1.getDataFromArgs)(args);\n        const data = encode(Object.assign({}, dataFromArgs, overrideData));\n        const options = (0, utils_js_1.getOptionsFromArgs)(args);\n        const host = options.host || spec.host;\n        const streaming = !!spec.streaming;\n        // Validate that there are no more args.\n        if (args.filter((x) => x != null).length) {\n            throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n        }\n        // When using full path, we can just invoke the URL interpolator directly\n        // as we don't need to use the resource to create a full path.\n        const requestPath = isUsingFullPath\n            ? commandPath(urlData)\n            : this.createFullPath(commandPath, urlData);\n        const headers = Object.assign(options.headers, spec.headers);\n        if (spec.validator) {\n            spec.validator(data, { headers });\n        }\n        const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n        const bodyData = dataInQuery ? {} : data;\n        const queryData = dataInQuery ? data : {};\n        return {\n            requestMethod,\n            requestPath,\n            bodyData,\n            queryData,\n            auth: options.auth,\n            headers,\n            host: host !== null && host !== void 0 ? host : null,\n            streaming,\n            settings: options.settings,\n        };\n    },\n    _makeRequest(requestArgs, spec, overrideData) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            let opts;\n            try {\n                opts = this._getRequestOpts(requestArgs, spec, overrideData);\n            }\n            catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(spec.transformResponseData\n                        ? spec.transformResponseData(response)\n                        : response);\n                }\n            }\n            const emptyQuery = Object.keys(opts.queryData).length === 0;\n            const path = [\n                opts.requestPath,\n                emptyQuery ? '' : '?',\n                (0, utils_js_1.stringifyRequestData)(opts.queryData),\n            ].join('');\n            const { headers, settings } = opts;\n            this._stripe._requestSender._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, { headers, settings, streaming: opts.streaming }, requestCallback, (_a = this.requestDataProcessor) === null || _a === void 0 ? void 0 : _a.bind(this));\n        });\n    },\n};\n"},"lineCount":170}},"error":null,"hash":"8359627bf30290c772dea6d65bafdc8f","cacheData":{"env":{}}}