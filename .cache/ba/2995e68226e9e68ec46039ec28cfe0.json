{"id":"../../node_modules/browserify-aes/modes/ctr.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1684371838479},{"name":"buffer-xor","loc":{"line":1,"column":18,"index":18},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\buffer-xor\\index.js"},{"name":"safe-buffer","loc":{"line":2,"column":21,"index":54},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\safe-buffer\\index.js"},{"name":"../incr32","loc":{"line":3,"column":21,"index":98},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\browserify-aes\\incr32.js"}],"generated":{"js":"\nvar xor = require('buffer-xor')\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar incr32 = require('../incr32')\r\n\r\nfunction getBlock (self) {\r\n  var out = self._cipher.encryptBlockRaw(self._prev)\r\n  incr32(self._prev)\r\n  return out\r\n}\r\n\r\nvar blockSize = 16\r\nexports.encrypt = function (self, chunk) {\r\n  var chunkNum = Math.ceil(chunk.length / blockSize)\r\n  var start = self._cache.length\r\n  self._cache = Buffer.concat([\r\n    self._cache,\r\n    Buffer.allocUnsafe(chunkNum * blockSize)\r\n  ])\r\n  for (var i = 0; i < chunkNum; i++) {\r\n    var out = getBlock(self)\r\n    var offset = start + i * blockSize\r\n    self._cache.writeUInt32BE(out[0], offset + 0)\r\n    self._cache.writeUInt32BE(out[1], offset + 4)\r\n    self._cache.writeUInt32BE(out[2], offset + 8)\r\n    self._cache.writeUInt32BE(out[3], offset + 12)\r\n  }\r\n  var pad = self._cache.slice(0, chunk.length)\r\n  self._cache = self._cache.slice(chunk.length)\r\n  return xor(chunk, pad)\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/browserify-aes/modes/ctr.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../../node_modules/browserify-aes/modes/ctr.js":"var xor = require('buffer-xor')\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar incr32 = require('../incr32')\r\n\r\nfunction getBlock (self) {\r\n  var out = self._cipher.encryptBlockRaw(self._prev)\r\n  incr32(self._prev)\r\n  return out\r\n}\r\n\r\nvar blockSize = 16\r\nexports.encrypt = function (self, chunk) {\r\n  var chunkNum = Math.ceil(chunk.length / blockSize)\r\n  var start = self._cache.length\r\n  self._cache = Buffer.concat([\r\n    self._cache,\r\n    Buffer.allocUnsafe(chunkNum * blockSize)\r\n  ])\r\n  for (var i = 0; i < chunkNum; i++) {\r\n    var out = getBlock(self)\r\n    var offset = start + i * blockSize\r\n    self._cache.writeUInt32BE(out[0], offset + 0)\r\n    self._cache.writeUInt32BE(out[1], offset + 4)\r\n    self._cache.writeUInt32BE(out[2], offset + 8)\r\n    self._cache.writeUInt32BE(out[3], offset + 12)\r\n  }\r\n  var pad = self._cache.slice(0, chunk.length)\r\n  self._cache = self._cache.slice(chunk.length)\r\n  return xor(chunk, pad)\r\n}\r\n"},"lineCount":32}},"error":null,"hash":"b03fb3a73bd353c2793198fa005cdf01","cacheData":{"env":{}}}