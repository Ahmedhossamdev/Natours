{"id":"../../node_modules/core-js/modules/es6.regexp.split.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1684371840936},{"name":"./_is-regexp","loc":{"line":3,"column":23,"index":40},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_is-regexp.js"},{"name":"./_an-object","loc":{"line":4,"column":23,"index":81},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_an-object.js"},{"name":"./_species-constructor","loc":{"line":5,"column":33,"index":132},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_species-constructor.js"},{"name":"./_advance-string-index","loc":{"line":6,"column":33,"index":193},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_advance-string-index.js"},{"name":"./_to-length","loc":{"line":7,"column":23,"index":245},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_to-length.js"},{"name":"./_regexp-exec-abstract","loc":{"line":8,"column":29,"index":292},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_regexp-exec-abstract.js"},{"name":"./_regexp-exec","loc":{"line":9,"column":25,"index":346},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_regexp-exec.js"},{"name":"./_fails","loc":{"line":10,"column":20,"index":386},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_fails.js"},{"name":"./_fix-re-wks","loc":{"line":22,"column":8,"index":729},"parent":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\es6.regexp.split.js","resolved":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\core-js\\modules\\_fix-re-wks.js"}],"generated":{"js":"'use strict';\r\n\r\nvar isRegExp = require('./_is-regexp');\r\nvar anObject = require('./_an-object');\r\nvar speciesConstructor = require('./_species-constructor');\r\nvar advanceStringIndex = require('./_advance-string-index');\r\nvar toLength = require('./_to-length');\r\nvar callRegExpExec = require('./_regexp-exec-abstract');\r\nvar regexpExec = require('./_regexp-exec');\r\nvar fails = require('./_fails');\r\nvar $min = Math.min;\r\nvar $push = [].push;\r\nvar $SPLIT = 'split';\r\nvar LENGTH = 'length';\r\nvar LAST_INDEX = 'lastIndex';\r\nvar MAX_UINT32 = 0xffffffff;\r\n\r\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\r\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\r\n\r\n// @@split logic\r\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\r\n  var internalSplit;\r\n  if (\r\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\r\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\r\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\r\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\r\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\r\n    ''[$SPLIT](/.?/)[LENGTH]\r\n  ) {\r\n    // based on es5-shim implementation, need to rework it\r\n    internalSplit = function (separator, limit) {\r\n      var string = String(this);\r\n      if (separator === undefined && limit === 0) return [];\r\n      // If `separator` is not a regex, use native split\r\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\r\n      var output = [];\r\n      var flags = (separator.ignoreCase ? 'i' : '') +\r\n                  (separator.multiline ? 'm' : '') +\r\n                  (separator.unicode ? 'u' : '') +\r\n                  (separator.sticky ? 'y' : '');\r\n      var lastLastIndex = 0;\r\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\r\n      // Make `global` and avoid `lastIndex` issues by working with a copy\r\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\r\n      var match, lastIndex, lastLength;\r\n      while (match = regexpExec.call(separatorCopy, string)) {\r\n        lastIndex = separatorCopy[LAST_INDEX];\r\n        if (lastIndex > lastLastIndex) {\r\n          output.push(string.slice(lastLastIndex, match.index));\r\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\r\n          lastLength = match[0][LENGTH];\r\n          lastLastIndex = lastIndex;\r\n          if (output[LENGTH] >= splitLimit) break;\r\n        }\r\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\r\n      }\r\n      if (lastLastIndex === string[LENGTH]) {\r\n        if (lastLength || !separatorCopy.test('')) output.push('');\r\n      } else output.push(string.slice(lastLastIndex));\r\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\r\n    };\r\n  // Chakra, V8\r\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\r\n    internalSplit = function (separator, limit) {\r\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\r\n    };\r\n  } else {\r\n    internalSplit = $split;\r\n  }\r\n\r\n  return [\r\n    // `String.prototype.split` method\r\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\r\n    function split(separator, limit) {\r\n      var O = defined(this);\r\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\r\n      return splitter !== undefined\r\n        ? splitter.call(separator, O, limit)\r\n        : internalSplit.call(String(O), separator, limit);\r\n    },\r\n    // `RegExp.prototype[@@split]` method\r\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\r\n    //\r\n    // NOTE: This cannot be properly polyfilled in engines that don't support\r\n    // the 'y' flag.\r\n    function (regexp, limit) {\r\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\r\n      if (res.done) return res.value;\r\n\r\n      var rx = anObject(regexp);\r\n      var S = String(this);\r\n      var C = speciesConstructor(rx, RegExp);\r\n\r\n      var unicodeMatching = rx.unicode;\r\n      var flags = (rx.ignoreCase ? 'i' : '') +\r\n                  (rx.multiline ? 'm' : '') +\r\n                  (rx.unicode ? 'u' : '') +\r\n                  (SUPPORTS_Y ? 'y' : 'g');\r\n\r\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\r\n      // simulate the 'y' flag.\r\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\r\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\r\n      if (lim === 0) return [];\r\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\r\n      var p = 0;\r\n      var q = 0;\r\n      var A = [];\r\n      while (q < S.length) {\r\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\r\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\r\n        var e;\r\n        if (\r\n          z === null ||\r\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\r\n        ) {\r\n          q = advanceStringIndex(S, q, unicodeMatching);\r\n        } else {\r\n          A.push(S.slice(p, q));\r\n          if (A.length === lim) return A;\r\n          for (var i = 1; i <= z.length - 1; i++) {\r\n            A.push(z[i]);\r\n            if (A.length === lim) return A;\r\n          }\r\n          q = p = e;\r\n        }\r\n      }\r\n      A.push(S.slice(p));\r\n      return A;\r\n    }\r\n  ];\r\n});\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/core-js/modules/es6.regexp.split.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}}],"sources":{"../../node_modules/core-js/modules/es6.regexp.split.js":"'use strict';\r\n\r\nvar isRegExp = require('./_is-regexp');\r\nvar anObject = require('./_an-object');\r\nvar speciesConstructor = require('./_species-constructor');\r\nvar advanceStringIndex = require('./_advance-string-index');\r\nvar toLength = require('./_to-length');\r\nvar callRegExpExec = require('./_regexp-exec-abstract');\r\nvar regexpExec = require('./_regexp-exec');\r\nvar fails = require('./_fails');\r\nvar $min = Math.min;\r\nvar $push = [].push;\r\nvar $SPLIT = 'split';\r\nvar LENGTH = 'length';\r\nvar LAST_INDEX = 'lastIndex';\r\nvar MAX_UINT32 = 0xffffffff;\r\n\r\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\r\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\r\n\r\n// @@split logic\r\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\r\n  var internalSplit;\r\n  if (\r\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\r\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\r\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\r\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\r\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\r\n    ''[$SPLIT](/.?/)[LENGTH]\r\n  ) {\r\n    // based on es5-shim implementation, need to rework it\r\n    internalSplit = function (separator, limit) {\r\n      var string = String(this);\r\n      if (separator === undefined && limit === 0) return [];\r\n      // If `separator` is not a regex, use native split\r\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\r\n      var output = [];\r\n      var flags = (separator.ignoreCase ? 'i' : '') +\r\n                  (separator.multiline ? 'm' : '') +\r\n                  (separator.unicode ? 'u' : '') +\r\n                  (separator.sticky ? 'y' : '');\r\n      var lastLastIndex = 0;\r\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\r\n      // Make `global` and avoid `lastIndex` issues by working with a copy\r\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\r\n      var match, lastIndex, lastLength;\r\n      while (match = regexpExec.call(separatorCopy, string)) {\r\n        lastIndex = separatorCopy[LAST_INDEX];\r\n        if (lastIndex > lastLastIndex) {\r\n          output.push(string.slice(lastLastIndex, match.index));\r\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\r\n          lastLength = match[0][LENGTH];\r\n          lastLastIndex = lastIndex;\r\n          if (output[LENGTH] >= splitLimit) break;\r\n        }\r\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\r\n      }\r\n      if (lastLastIndex === string[LENGTH]) {\r\n        if (lastLength || !separatorCopy.test('')) output.push('');\r\n      } else output.push(string.slice(lastLastIndex));\r\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\r\n    };\r\n  // Chakra, V8\r\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\r\n    internalSplit = function (separator, limit) {\r\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\r\n    };\r\n  } else {\r\n    internalSplit = $split;\r\n  }\r\n\r\n  return [\r\n    // `String.prototype.split` method\r\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\r\n    function split(separator, limit) {\r\n      var O = defined(this);\r\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\r\n      return splitter !== undefined\r\n        ? splitter.call(separator, O, limit)\r\n        : internalSplit.call(String(O), separator, limit);\r\n    },\r\n    // `RegExp.prototype[@@split]` method\r\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\r\n    //\r\n    // NOTE: This cannot be properly polyfilled in engines that don't support\r\n    // the 'y' flag.\r\n    function (regexp, limit) {\r\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\r\n      if (res.done) return res.value;\r\n\r\n      var rx = anObject(regexp);\r\n      var S = String(this);\r\n      var C = speciesConstructor(rx, RegExp);\r\n\r\n      var unicodeMatching = rx.unicode;\r\n      var flags = (rx.ignoreCase ? 'i' : '') +\r\n                  (rx.multiline ? 'm' : '') +\r\n                  (rx.unicode ? 'u' : '') +\r\n                  (SUPPORTS_Y ? 'y' : 'g');\r\n\r\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\r\n      // simulate the 'y' flag.\r\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\r\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\r\n      if (lim === 0) return [];\r\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\r\n      var p = 0;\r\n      var q = 0;\r\n      var A = [];\r\n      while (q < S.length) {\r\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\r\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\r\n        var e;\r\n        if (\r\n          z === null ||\r\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\r\n        ) {\r\n          q = advanceStringIndex(S, q, unicodeMatching);\r\n        } else {\r\n          A.push(S.slice(p, q));\r\n          if (A.length === lim) return A;\r\n          for (var i = 1; i <= z.length - 1; i++) {\r\n            A.push(z[i]);\r\n            if (A.length === lim) return A;\r\n          }\r\n          q = p = e;\r\n        }\r\n      }\r\n      A.push(S.slice(p));\r\n      return A;\r\n    }\r\n  ];\r\n});\r\n"},"lineCount":135}},"error":null,"hash":"c807a539f74d5f4e4c2efbbb90dfbdf1","cacheData":{"env":{}}}