{"id":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","dependencies":[{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\package.json","includedInParent":true,"mtime":1686110905962},{"name":"C:\\Users\\Ahmed\\Desktop\\Natours\\node_modules\\stripe\\cjs\\package.json","includedInParent":true,"mtime":1686031678189}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoProvider = void 0;\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nclass CryptoProvider {\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignature(payload, secret) {\n        throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignatureAsync(payload, secret) {\n        throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n}\nexports.CryptoProvider = CryptoProvider;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/stripe/cjs/crypto/CryptoProvider.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"../../node_modules/stripe/cjs/crypto/CryptoProvider.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoProvider = void 0;\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nclass CryptoProvider {\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignature(payload, secret) {\n        throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignatureAsync(payload, secret) {\n        throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n}\nexports.CryptoProvider = CryptoProvider;\n"},"lineCount":36}},"error":null,"hash":"8c97bc8f397da145ae77ceada145c2e1","cacheData":{"env":{}}}